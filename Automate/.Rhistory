for (j in 1:ndfs) {
a = smooth.spline(x.tr,y.tr,df=dfs[j])
yhat = predict(a,x.val)$y
errs[i.val,j] = (yhat-y.val)^2
}
}
cv = colMeans(errs)
errs0 = matrix(0,K,ndfs)
for (k in 1:K) {
errs0[k,] = colMeans(errs[folds[[k]],])
}
dim(errs)
errs[1,]
load(file="splines.Rdata")
n = 100
x = 1:n/n
K = 100
folds = vector(mode="list",length=K)
for (k in 1:K) {
folds[[k]] = seq(k,n,by=K)
}
dfs = 2:30
ndfs = length(dfs)
errs = matrix(0,n,ndfs)
for (k in 1:K) {
i.tr = unlist(folds[-k])
i.val = folds[[k]]
x.tr = x[i.tr]
y.tr = y[i.tr]
x.val = x[i.val]
y.val = y[i.val]
for (j in 1:ndfs) {
a = smooth.spline(x.tr,y.tr,df=dfs[j])
yhat = predict(a,x.val)$y
errs[i.val,j] = (yhat-y.val)^2
}
}
cv = colMeans(errs)
errs0 =errs
se = apply(errs0,2,sd)/sqrt(K)
# Usual rule
i1 = which.min(cv)
# One standard error rule---note the min!
i2 = min(which(cv<=cv[i1]+se[i1]))
plot(dfs,cv,type="l",ylim=range(c(cv-se,cv+se)))
points(dfs,cv,pch=20)
lines(dfs,cv-se,lty=3)
lines(dfs,cv+se,lty=3)
abline(v=dfs[i1],col="red",lty=2)
abline(v=dfs[i2],col="blue",lty=2)
yhat1 = smooth.spline(x,y,df=dfs[i1])$y
yhat2 = smooth.spline(x,y,df=dfs[i2])$y
plot(x,y)
lines(x,yhat1,col="red",lwd=2)
lines(x,yhat2,col="blue",lwd=2)
smooth.spline(x.tr,y.tr,df=dfs[j])
smooth.spline(x.tr,y.tr,df=dfs[j])$lev
load(file="splines.Rdata")
n = 100
x = 1:n/n
K = 100
folds = vector(mode="list",length=K)
for (k in 1:K) {
folds[[k]] = seq(k,n,by=K)
}
dfs = 2:30
ndfs = length(dfs)
errs = matrix(0,n,ndfs)
for (k in 1:K) {
i.tr = unlist(folds[-k])
i.val = folds[[k]]
x.tr = x[i.tr]
y.tr = y[i.tr]
x.val = x[i.val]
y.val = y[i.val]
for (j in 1:ndfs) {
a = smooth.spline(x.tr,y.tr,df=dfs[j])
yhat = predict(a,x.val)$y
errs[i.val,j] = (yhat-y.val)^2
s[i.val,j] = a$lev[k]
}
}
load(file="splines.Rdata")
n = 100
x = 1:n/n
K = 100
folds = vector(mode="list",length=K)
for (k in 1:K) {
folds[[k]] = seq(k,n,by=K)
}
dfs = 2:30
ndfs = length(dfs)
errs = matrix(0,n,ndfs)
s = matrix(0,n,ndfs)
for (k in 1:K) {
i.tr = unlist(folds[-k])
i.val = folds[[k]]
x.tr = x[i.tr]
y.tr = y[i.tr]
x.val = x[i.val]
y.val = y[i.val]
for (j in 1:ndfs) {
a = smooth.spline(x.tr,y.tr,df=dfs[j])
yhat = predict(a,x.val)$y
errs[i.val,j] = (yhat-y.val)^2
s[i.val,j] = a$lev[k]
}
}
cv = colMeans(errs)
errs0 =errs
se = apply(errs0,2,sd)/sqrt(K)
# Usual rule
i1 = which.min(cv)
# One standard error rule---note the min!
i2 = min(which(cv<=cv[i1]+se[i1]))
plot(dfs,cv,type="l",ylim=range(c(cv-se,cv+se)))
points(dfs,cv,pch=20)
lines(dfs,cv-se,lty=3)
lines(dfs,cv+se,lty=3)
abline(v=dfs[i1],col="red",lty=2)
abline(v=dfs[i2],col="blue",lty=2)
yhat1 = smooth.spline(x,y,df=dfs[i1])$y
yhat2 = smooth.spline(x,y,df=dfs[i2])$y
plot(x,y)
lines(x,yhat1,col="red",lwd=2)
lines(x,yhat2,col="blue",lwd=2)
View(s)
View(s)
matrx(0, 2, 2) - matrix(1,2,2)
matrix(0, 2, 2) - matrix(1,2,2)
y - yhat1
dim(s)
(y - yhat1) / (1 - s[,1])
s[,1]
s[,2]
dim(errs)
errs[,1]
s[1,]
load(file="splines.Rdata")
n = 100
x = 1:n/n
K = 100
folds = vector(mode="list",length=K)
for (k in 1:K) {
folds[[k]] = seq(k,n,by=K)
}
dfs = 2:30
ndfs = length(dfs)
errs = matrix(0,n,ndfs)
s = matrix(0,n,ndfs)
for (k in 1:K) {
i.tr = unlist(folds[-k])
i.val = folds[[k]]
x.tr = x[i.tr]
y.tr = y[i.tr]
x.val = x[i.val]
y.val = y[i.val]
for (j in 1:ndfs) {
a = smooth.spline(x.tr,y.tr,df=dfs[j])
yhat = predict(a,x.val)$y
errs[i.val,j] = (yhat-y.val)^2
s[i.val,j] = a$lev[k]
}
}
cv = colMeans(errs)
errs0 = errs
se = apply(errs0,2,sd)/sqrt(K)
# Usual rule
i1 = which.min(cv)
# One standard error rule---note the min!
i2 = min(which(cv<=cv[i1]+se[i1]))
plot(dfs,cv,type="l",ylim=range(c(cv-se,cv+se)))
points(dfs,cv,pch=20)
lines(dfs,cv-se,lty=3)
lines(dfs,cv+se,lty=3)
abline(v=dfs[i1],col="red",lty=2)
abline(v=dfs[i2],col="blue",lty=2)
yhat1 = smooth.spline(x,y,df=dfs[i1])$y
yhat2 = smooth.spline(x,y,df=dfs[i2])$y
plot(x,y)
lines(x,yhat1,col="red",lwd=2)
lines(x,yhat2,col="blue",lwd=2)
View(s)
View(s)
load(file="splines.Rdata")
n = 100
x = 1:n/n
K = 100
folds = vector(mode="list",length=K)
for (k in 1:K) {
folds[[k]] = seq(k,n,by=K)
}
dfs = 2:30
ndfs = length(dfs)
errs = matrix(0,n,ndfs)
s = matrix(0,n,ndfs)
for (k in 1:K) {
i.tr = unlist(folds[-k])
i.val = folds[[k]]
x.tr = x[i.tr]
y.tr = y[i.tr]
x.val = x[i.val]
y.val = y[i.val]
for (j in 1:ndfs) {
a = smooth.spline(x.tr,y.tr,df=dfs[j])
yhat = predict(a,x.val)$y
errs[i.val,j] = (yhat-y.val)^2
s[i.val,j] = a$lev[min(k, 99)]
}
}
cv = colMeans(errs)
errs0 = errs
se = apply(errs0,2,sd)/sqrt(K)
# Usual rule
i1 = which.min(cv)
# One standard error rule---note the min!
i2 = min(which(cv<=cv[i1]+se[i1]))
plot(dfs,cv,type="l",ylim=range(c(cv-se,cv+se)))
points(dfs,cv,pch=20)
lines(dfs,cv-se,lty=3)
lines(dfs,cv+se,lty=3)
abline(v=dfs[i1],col="red",lty=2)
abline(v=dfs[i2],col="blue",lty=2)
yhat1 = smooth.spline(x,y,df=dfs[i1])$y
yhat2 = smooth.spline(x,y,df=dfs[i2])$y
plot(x,y)
lines(x,yhat1,col="red",lwd=2)
lines(x,yhat2,col="blue",lwd=2)
s
View(s)
View(s)
(y - yhat1)/(1 - s[,1])
sum(((y - yhat1)/(1 - s[,1]))^2)
cv
mean(((y - yhat1)/(1 - s[,1]))^2)
s[,1]
?smooth.spline
load(file="splines.Rdata")
n = 100
x = 1:n/n
K = 100
folds = vector(mode="list",length=K)
for (k in 1:K) {
folds[[k]] = seq(k,n,by=K)
}
dfs = 2:30
ndfs = length(dfs)
errs = matrix(0,n,ndfs)
s = matrix(0,n,ndfs)
for (k in 1:K) {
i.tr = unlist(folds[-k])
i.val = folds[[k]]
x.tr = x[i.tr]
y.tr = y[i.tr]
x.val = x[i.val]
y.val = y[i.val]
for (j in 1:ndfs) {
a = smooth.spline(x.tr,y.tr,df=dfs[j])
yhat = predict(a,x.val)$y
errs[i.val,j] = (yhat-y.val)^2
#s[i.val,j] = a$lev[min(k, 99)]
s[i.val,j] = sum(a$lev)
}
}
cv = colMeans(errs)
errs0 = errs
se = apply(errs0,2,sd)/sqrt(K)
# Usual rule
i1 = which.min(cv)
# One standard error rule---note the min!
i2 = min(which(cv<=cv[i1]+se[i1]))
plot(dfs,cv,type="l",ylim=range(c(cv-se,cv+se)))
points(dfs,cv,pch=20)
lines(dfs,cv-se,lty=3)
lines(dfs,cv+se,lty=3)
abline(v=dfs[i1],col="red",lty=2)
abline(v=dfs[i2],col="blue",lty=2)
yhat1 = smooth.spline(x,y,df=dfs[i1])$y
yhat2 = smooth.spline(x,y,df=dfs[i2])$y
plot(x,y)
lines(x,yhat1,col="red",lwd=2)
lines(x,yhat2,col="blue",lwd=2)
mean(((y - yhat1)/(1 - s[,1]))^2)
s[,1]
load(file="splines.Rdata")
n = 100
x = 1:n/n
K = 100
folds = vector(mode="list",length=K)
for (k in 1:K) {
folds[[k]] = seq(k,n,by=K)
}
dfs = 2:30
ndfs = length(dfs)
errs = matrix(0,n,ndfs)
s = matrix(0,n,ndfs)
for (k in 1:K) {
i.tr = unlist(folds[-k])
i.val = folds[[k]]
x.tr = x[i.tr]
y.tr = y[i.tr]
x.val = x[i.val]
y.val = y[i.val]
for (j in 1:ndfs) {
a = smooth.spline(x.tr,y.tr,df=dfs[j])
yhat = predict(a,x.val)$y
errs[i.val,j] = (yhat-y.val)^2
#s[i.val,j] = a$lev[min(k, 99)]
s[i.val,j] = mean(a$lev)
}
}
cv = colMeans(errs)
errs0 = errs
se = apply(errs0,2,sd)/sqrt(K)
# Usual rule
i1 = which.min(cv)
# One standard error rule---note the min!
i2 = min(which(cv<=cv[i1]+se[i1]))
plot(dfs,cv,type="l",ylim=range(c(cv-se,cv+se)))
points(dfs,cv,pch=20)
lines(dfs,cv-se,lty=3)
lines(dfs,cv+se,lty=3)
abline(v=dfs[i1],col="red",lty=2)
abline(v=dfs[i2],col="blue",lty=2)
yhat1 = smooth.spline(x,y,df=dfs[i1])$y
yhat2 = smooth.spline(x,y,df=dfs[i2])$y
plot(x,y)
lines(x,yhat1,col="red",lwd=2)
lines(x,yhat2,col="blue",lwd=2)
mean(((y - yhat1)/(1 - s[,1]))^2)
s[,1]
mean(((y - yhat1)/(1 - s[,1]))^2)
load(file="splines.Rdata")
n = 100
x = 1:n/n
K = 100
folds = vector(mode="list",length=K)
for (k in 1:K) {
folds[[k]] = seq(k,n,by=K)
}
dfs = 2:30
ndfs = length(dfs)
errs = matrix(0,n,ndfs)
s = matrix(0,n,ndfs)
for (k in 1:K) {
i.tr = unlist(folds[-k])
i.val = folds[[k]]
x.tr = x[i.tr]
y.tr = y[i.tr]
x.val = x[i.val]
y.val = y[i.val]
for (j in 1:ndfs) {
a = smooth.spline(x.tr,y.tr,df=dfs[j])
yhat = predict(a,x.val)$y
errs[i.val,j] = (yhat-y.val)^2
s[i.val,j] = a$lev[min(k, 99)]
}
}
cv = colMeans(errs)
errs0 = errs
se = apply(errs0,2,sd)/sqrt(K)
# Usual rule
i1 = which.min(cv)
# One standard error rule---note the min!
i2 = min(which(cv<=cv[i1]+se[i1]))
plot(dfs,cv,type="l",ylim=range(c(cv-se,cv+se)))
points(dfs,cv,pch=20)
lines(dfs,cv-se,lty=3)
lines(dfs,cv+se,lty=3)
abline(v=dfs[i1],col="red",lty=2)
abline(v=dfs[i2],col="blue",lty=2)
yhat1 = smooth.spline(x,y,df=dfs[i1])$y
yhat2 = smooth.spline(x,y,df=dfs[i2])$y
plot(x,y)
lines(x,yhat1,col="red",lwd=2)
lines(x,yhat2,col="blue",lwd=2)
mean(((y - yhat1)/(1 - s[,1]))^2)
cv
mean(((y - yhat1)/(1 - s[,2]))^2)
mean(((y - yhat1)/(1 - s[,3]))^2)
matrix(1, 2,2) / matrix(2,2,2)
s
load(file="splines.Rdata")
n = 100
x = 1:n/n
K = 100
folds = vector(mode="list",length=K)
for (k in 1:K) {
folds[[k]] = seq(k,n,by=K)
}
dfs = 2:30
ndfs = length(dfs)
errs = matrix(0,n,ndfs)
s = matrix(0,n,ndfs)
for (k in 1:K) {
i.tr = unlist(folds[-k])
i.val = folds[[k]]
x.tr = x[i.tr]
y.tr = y[i.tr]
x.val = x[i.val]
y.val = y[i.val]
for (j in 1:ndfs) {
a = smooth.spline(x.tr,y.tr,df=dfs[j])
yhat = predict(a,x.val)$y
errs[i.val,j] = (yhat-y.val)^2
#s[i.val,j] = a$lev[min(k, 99)]
s[i.val,j] = sum(a$lev)
}
}
cv = colMeans(errs)
errs0 = errs
se = apply(errs0,2,sd)/sqrt(K)
# Usual rule
i1 = which.min(cv)
# One standard error rule---note the min!
i2 = min(which(cv<=cv[i1]+se[i1]))
plot(dfs,cv,type="l",ylim=range(c(cv-se,cv+se)))
points(dfs,cv,pch=20)
lines(dfs,cv-se,lty=3)
lines(dfs,cv+se,lty=3)
abline(v=dfs[i1],col="red",lty=2)
abline(v=dfs[i2],col="blue",lty=2)
yhat1 = smooth.spline(x,y,df=dfs[i1])$y
yhat2 = smooth.spline(x,y,df=dfs[i2])$y
plot(x,y)
lines(x,yhat1,col="red",lwd=2)
lines(x,yhat2,col="blue",lwd=2)
s
mean(((y - yhat1)/(1 - s[,3]))^2)
?step
data = read.table(file.choose(), sep = "\t", header = TRUE, as.is = TRUE)
number of items read is not a mutiple of the number of column
data = read.table(file.choose(), sep = "\t", header = TRUE, as.is = TRUE)
setwd("~")
source('~/Desktop/36726 Statistical Practice/Project/code/Automate/data_cleaning.R', echo=TRUE)
source('~/Desktop/36726 Statistical Practice/Project/code/Automate/data_cleaning.R', echo=TRUE)
dir.exists("./Output Data/")
source('~/Desktop/36726 Statistical Practice/Project/code/Automate/data_cleaning.R', echo=TRUE)
# STEP 2: select all the data needed for the cleaning purpose
invisible(readline(prompt = "Pleae choose AOI Blank file in the next dialogue window. Press [enter] to continue"))
invisible(readline(prompt = "Pleae choose AOI Fixation file in the next dialogue window. Press [enter] to continue"))
invisible(readline(prompt = "Pleae choose Fixations, saccades, and blink counts file in the next dialogue window. Press [enter] to continue"))
invisible(readline(prompt = "Pleae choose Trial Duration file in the next dialogue window. Press [enter] to continue"))
invisible(readline(prompt = "Pleae choose raw file in the next window. Press [enter] to continue"))
# STEP 3: let it run
source("./functions/data_clean_process.R")
# STEP 2: select all the data needed for the cleaning purpose
invisible(readline(prompt = "Pleae choose AOI Blank file in the next dialogue window. Press [enter] to continue"))
source('~/Desktop/36726 Statistical Practice/Project/code/Automate/data_cleaning.R', echo=TRUE)
source('~/Desktop/36726 Statistical Practice/Project/code/Automate/data_cleaning.R', echo=TRUE)
version = 1
version_dir = paste0("./version ". version, "/")
version_dir = paste0("./version ", version, "/")
version_dir
version_dir = paste0("./Version ", version, "/")
version_dir
by_trial_dir = paste0(version_dir,"/Version ",version," Trial/")
by_par_dir = paste0(version_dir,"/Version ",version," Participants/")
by_par_dir
by_trial_dir = paste0(version_dir,"Version ",version," Trial/")
by_par_dir = paste0(version_dir,"Version ",version," Participants/")
by_par_dir
by_trial_dir
print.percentage(i, n, dp = 0, first = 1, last = n, prev = i - 1)
lca::print.percentage(i, n, dp = 0, first = 1, last = n, prev = i - 1)
install.packages("LCA")
print.percentage(i, n, dp = 0, first = 1, last = n, prev = i - 1)
source('~/Desktop/36726 Statistical Practice/Project/code/Automate/alt_plots.R', echo=TRUE)
source('~/Desktop/36726 Statistical Practice/Project/code/Automate/alt_plots.R', echo=TRUE)
source('~/Desktop/36726 Statistical Practice/Project/code/Automate/alt_plots.R', echo=TRUE)
source('~/Desktop/36726 Statistical Practice/Project/code/Automate/alt_plots.R', echo=TRUE)
source('~/Desktop/36726 Statistical Practice/Project/code/Automate/alt_plots.R', echo=TRUE)
source('~/Desktop/36726 Statistical Practice/Project/code/Automate/alt_plots.R', echo=TRUE)
source('~/Desktop/36726 Statistical Practice/Project/code/Automate/alt_plots.R', echo=TRUE)
for (trial in 1:total_trial){
print(alt_plot_trial(data, eye, version, trial))
ggsave(paste0(by_trial_dir, "Version ", version, " Trial ", trial, ".png"), width = 16, height = 9)
plot(paste0(trial, "/", total_trial, "Done"))
}
for (trial in 1:total_trial){
print(alt_plot_trial(data, eye, version, trial))
ggsave(paste0(by_trial_dir, "Version ", version, " Trial ", trial, ".png"), width = 16, height = 9)
plot(paste0(trial, "/", total_trial, "Done"))
}
source('~/Desktop/36726 Statistical Practice/Project/code/Automate/alt_plots.R', echo=TRUE)
total_trial
alt_plot_trial(data, eye, 3, 2)
for (trial in 1:total_trial){
print(alt_plot_trial(data, eye, version, trial))
ggsave(paste0(by_trial_dir, "Version ", version, " Trial ", trial, ".png"), width = 16, height = 9)
plot(paste0(trial, "/", total_trial, "Done"))
}
trial
trial
alt_plot_trial(data, eye, 3, 1)
for (trial in 1:total_trial){
print(alt_plot_trial(data, eye, version, trial))
print("ha")
ggsave(paste0(by_trial_dir, "Version ", version, " Trial ", trial, ".png"), width = 16, height = 9)
plot(paste0(trial, "/", total_trial, "Done"))
}
for (trial in 1:total_trial){
print(alt_plot_trial(data, eye, version, trial))
ggsave(paste0(by_trial_dir, "Version ", version, " Trial ", trial, ".png"), width = 16, height = 9)
print("ha")
plot(paste0(trial, "/", total_trial, "Done"))
}
for (trial in 1:total_trial){
print(alt_plot_trial(data, eye, version, trial))
ggsave(paste0(by_trial_dir, "Version ", version, " Trial ", trial, ".png"), width = 16, height = 9)
print(paste0(trial, "/", total_trial, "Done"))
}
