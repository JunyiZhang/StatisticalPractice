{
    "collab_server" : "",
    "contents" : "## load in data\nclean_datasets = list.files(pattern = \"clean\")\ndata_eye = NA\nfor(file in clean_datasets) {\n  data_temp = read.csv(file)\n  data_eye = rbind(data_eye, data_temp)\n}\ndata_eye = data_eye[-1, ]\n\ncolnames(data_eye) = tolower(colnames(data_eye))\ncolnames(data_eye)[1] = \"id\"\n\ndata_compre = read.csv(\"compre_abv.csv\")\ndata_reading = read.csv(\"reading_abv.csv\")\n\n\n## merge data\neye_id = unique(as.character(data_eye$id))\ncompre_id = unique(as.character(data_compre$id))\nreading_id = unique(as.character(data_reading$id))\n\nid = intersect(eye_id, compre_id)\nid = intersect(id, reading_id)\n# eye_id_diff = setdiff(eye_id, id)\n# compre_id_diff = setdiff(compre_id, id)\n# reading_id_diff = setdiff(reading_id, id)\n\ndata_compre = data_compre[!as.character(data_compre$id) %in% compre_id_diff, ]\ndata_eye = data_eye[!as.character(data_eye$id) %in% eye_id_diff, ]\ndata_reading = data_reading[!as.character(data_reading$id) %in% reading_id_diff, ]\n\ndata = merge(data_compre, data_eye, by = \"id\")\ndata = merge(data, data_reading, by = \"id\")\n\ndata$trial = as.numeric(gsub(\"Trial\", \"\", as.character(data$trial)))\n\n\n## split the data by version\nversions = split(data, data$version)\n\n# version 1\nv1 = versions[[1]]\nv1$layout1 = \"separated\"\nv1$layout1[v1$condition == \"standard\"] = \"standard\"\nv1$layout2 = \"separated\"\nv1$layout2[v1$trial %in% 1:4] = \"standard\"\nall(v1$layout1 == v1$layout2) # check\nv1$layout = v1$layout1\n\n# version 2\nv2 = versions[[2]]\nv2$layout1 = \"separated\"\nv2$layout1[v2$condition == \"standard\"] = \"standard\"\nv2$layout2 = \"separated\"\nv2$layout2[v2$trial %in% 9:12] = \"standard\"\nall(v2$layout1 == v2$layout2) # check\nv2$layout = v2$layout1\n\n# version 3\nv3 = versions[[3]]\nv3$layout = \"partial\"\nv3$layout[v3$trial %in% 1:4] = \"standard\"\nall(v3$layout == v3$condition) # check\n\n# version 4\nv4 = versions[[4]]\nv4$layout = \"partial\"\nv4$layout[v4$trial %in% 5:8] = \"standard\"\nall(v4$layout == v4$condition) # check\n\n# version 5\nv5 = versions[[5]]\nv5$layout = \"clean\"\nv5$layout[v5$trial %in% 1:3] = \"standard\"\nall(v5$layout == v5$condition) # check\n\n# version 6\nv6 = versions[[6]]\nv6$layout = \"clean\"\nv6$layout[v6$trial %in% 4:6] = \"standard\"\nall(v6$layout == v6$condition) # check\n\n\nv1 = v1[, c(\"id\", \"version\", \"layout\", \"quarter\", \"E1_5\", \"E6_10\", \"Q1_3\", \"Q4_6\", \n            \"trial_dur\", \"text_fix_time\", \"image_fix_time\", \n            \"text_image\", \"text_ws\",\"text_dash\")]\nv1$id = as.character(v1$id)\nv1_ids = split(v1, v1$id)\n\nv2 = v2[, c(\"id\", \"version\",\"layout\", \"quarter\", \"E1_5\", \"E6_10\", \"Q1_3\", \"Q4_6\", \n            \"trial_dur\", \"text_fix_time\", \"image_fix_time\", \n            \"text_image\", \"text_ws\",\"text_dash\")]\nv2$id = as.character(v2$id)\nv2_ids = split(v2, v2$id)\n\nv3 = v3[, c(\"id\", \"version\",\"layout\", \"quarter\", \"E1_5\", \"E6_10\", \"Q1_3\", \"Q4_6\", \n            \"trial_dur\", \"text_fix_time\", \"image_fix_time\", \n            \"text_image\", \"text_ws\",\"text_dash\")]\nv3$id = as.character(v3$id)\nv3_ids = split(v3, v3$id)\n\nv4 = v4[, c(\"id\", \"version\",\"layout\", \"quarter\", \"E1_5\", \"E6_10\", \"Q1_3\", \"Q4_6\", \n            \"trial_dur\", \"text_fix_time\", \"image_fix_time\", \n            \"text_image\", \"text_ws\",\"text_dash\")]\nv4$id = as.character(v4$id)\nv4_ids = split(v4, v4$id)\n\nv5 = v5[, c(\"id\", \"version\",\"layout\", \"quarter\", \"E1_5\", \"E6_10\", \"Q1_3\", \"Q4_6\", \n            \"trial_dur\", \"text_fix_time\", \"image_fix_time\", \n            \"text_image\", \"text_ws\",\"text_dash\")]\nv5$id = as.character(v5$id)\nv5_ids = split(v5, v5$id)\n\nv6 = v6[, c(\"id\", \"version\",\"layout\", \"quarter\", \"E1_5\", \"E6_10\", \"Q1_3\", \"Q4_6\", \n            \"trial_dur\", \"text_fix_time\", \"image_fix_time\", \n            \"text_image\", \"text_ws\",\"text_dash\")]\nv6$id = as.character(v6$id)\nv6_ids = split(v6, v6$id)\n\n\n# function to reformat the data -- 2 lines of data per id\none_id = function(one, cond) {\n  \n  one_layouts = split(one, one$layout)\n  \n  one_standard = one_layouts$standard\n  std_trial_dur = sum(one_standard$trial_dur, na.rm = TRUE)\n  std_image_time = sum(one_standard$image_fix_time, na.rm = TRUE)\n  std_text_time = sum(one_standard$text_fix_time, na.rm = TRUE)\n  std_text_pct = std_text_time/std_trial_dur\n  std_image_pct = std_image_time/std_trial_dur\n  std_alternations = sum(one_standard$text_image, na.rm = TRUE)\n  \n  one_other = one_layouts[[1]]\n  cond_trial_dur = sum(one_other$trial_dur, na.rm = TRUE)\n  cond_image_time = sum(one_other$image_fix_time, na.rm = TRUE)\n  cond_text_time = sum(one_other$text_fix_time, na.rm = TRUE)\n  cond_text_pct = cond_text_time/cond_trial_dur\n  cond_image_pct = cond_image_time/cond_trial_dur\n  cond_alternations = sum(one_other$text_image, na.rm = TRUE) \n  \n  id = c(unique(one$id), unique(one$id))\n  condition = c(\"standard\", cond)\n  Q = c(unique(one$Q1_3), unique(one$Q4_6))\n  E = c(unique(one$E1_5), unique(one$E6_10))\n  fix_text_pct = c(std_text_pct, cond_text_pct)\n  fix_image_pct = c(std_image_pct, cond_image_pct)\n  text_alternations = c(std_alternations, cond_alternations)\n  \n  level = as.character(one_layouts$standard$level)[1]\n  quarter = as.character(one_layouts$standard$quarter)[1]\n  \n  one_new = as.data.frame(cbind(id, condition, level, quarter,  Q, E, \n                                fix_text_pct, fix_image_pct, text_alternations))\n  \n  return(one_new)\n  \n}\n\n\nid = \"\"\ncondition = \"\"\nlevel = \"\"\nquarter = \"\"\nQ = 0\nE = 0\nfix_text_pct = 0\nfix_image_pct = 0\ntext_alternations = 0\nv1_new = as.data.frame(cbind(id, condition, level, quarter, Q, E, \n                             fix_text_pct, fix_image_pct, text_alternations))\nv2_new = v1_new\nv3_new = v1_new\nv4_new = v1_new\nv5_new = v1_new\nv6_new = v1_new\n\nfor(i in v1_ids){\n  v1_new = rbind(v1_new, one_id(i, \"separated\"))\n}\nv1_new = v1_new[-1, ]\n\nfor(i in v2_ids){\n  v2_new = rbind(v2_new, one_id(i, \"separated\"))\n}\nv2_new = v2_new[-1, ]\n\nfor(i in v3_ids){\n  v3_new = rbind(v3_new, one_id(i, \"partial\"))\n}\nv3_new = v3_new[-1, ]\n\nfor(i in v4_ids){\n  v4_new = rbind(v4_new, one_id(i, \"partial\"))\n}\nv4_new = v4_new[-1, ]\n\nfor(i in v5_ids){\n  v5_new = rbind(v5_new, one_id(i, \"clean\"))\n}\nv5_new = v5_new[-1, ]\n\nfor(i in v6_ids){\n  v6_new = rbind(v6_new, one_id(i, \"clean\"))\n}\nv6_new = v6_new[-1, ]\n\n\nv1_new$version = 1\nv2_new$version = 2\nv3_new$version = 1\nv4_new$version = 2\nv5_new$version = 1\nv6_new$version = 2\n\n\n# combine all versions and separated by experiments\ndata_new = rbind(v1_new, v2_new, v3_new, v4_new, v5_new, v6_new)\ndata_new$Q = as.numeric(as.character(data_new$Q))\ndata_new$E = as.numeric(as.character(data_new$E))\ndata_new$fix_text_pct = as.numeric(as.character(data_new$fix_text_pct))\ndata_new$fix_image_pct = as.numeric(as.character(data_new$fix_image_pct))\ndata_new$text_alternations = as.numeric(as.character(data_new$text_alternations))\ndata_new$level = as.character(data_new$level)\n\ndata_exp1 = rbind(v1_new, v2_new)\ndata_exp1$Q = as.numeric(as.character(data_exp1$Q))\ndata_exp1$E = as.numeric(as.character(data_exp1$E))\ndata_exp1$fix_text_pct = as.numeric(as.character(data_exp1$fix_text_pct))\ndata_exp1$fix_image_pct = as.numeric(as.character(data_exp1$fix_image_pct))\ndata_exp1$text_alternations = as.numeric(as.character(data_exp1$text_alternations))\ndata_exp1$level = as.character(data_exp1$level)\n\n\ndata_exp2 = rbind(v3_new, v4_new)\ndata_exp2$Q = as.numeric(as.character(data_exp2$Q))\ndata_exp2$E = as.numeric(as.character(data_exp2$E))\ndata_exp2$fix_text_pct = as.numeric(as.character(data_exp2$fix_text_pct))\ndata_exp2$fix_image_pct = as.numeric(as.character(data_exp2$fix_image_pct))\ndata_exp2$text_alternations = as.numeric(as.character(data_exp2$text_alternations))\ndata_exp2$level = as.character(data_exp2$level)\n\n\ndata_exp3 = rbind(v5_new, v6_new)\ndata_exp3$Q = as.numeric(as.character(data_exp3$Q))\ndata_exp3$E = as.numeric(as.character(data_exp3$E))\ndata_exp3$fix_text_pct = as.numeric(as.character(data_exp3$fix_text_pct))\ndata_exp3$fix_image_pct = as.numeric(as.character(data_exp3$fix_image_pct))\ndata_exp3$text_alternations = as.numeric(as.character(data_exp3$text_alternations))\ndata_exp3$level = as.character(data_exp3$level)\n\n#######################################################################\n\nif(!require(\"lme4\")){\n  install.packages(\"lme4\")\n  library(\"lme4\")\n}\n\nif(!require(\"lmerTest\")){\n  install.packages(\"lmerTest\")\n  library(\"lmerTest\")\n}\n\n### E ###\n\n# hierarchical & normal linear model for E ~ alt\nmd_E11 = lmer(E ~ scale(text_alternations) + scale(text_alternations)*relevel(condition, \"standard\") + (1|id), rbind(data_exp2, data_exp3))\nsummary(md_E11)\n# use linear regaression (by comparing BIC)\nmd_E12 = lm(E ~ scale(text_alternations) + scale(text_alternations)*relevel(condition, \"standard\"), data = rbind(data_exp2, data_exp3))\nsummary(md_E12)\n\n# hierarchical & normal linear model for alt ~ cond\nmd_E21 = lmer(text_alternations ~ relevel(condition, \"standard\") + (1|id), data = rbind(data_exp2, data_exp3))\nsummary(md_E21)\n# use hierarchical regaression (by comparing BIC)\nmd_E22 = lm(text_alternations ~ relevel(condition, \"standard\"), data = rbind(data_exp2, data_exp3))\nsummary(md_E22)\n\n# E ~ cond\nmd_E1 = lmer(E ~ relevel(condition, \"standard\") + (1|id), data = rbind(data_exp2, data_exp3))\nsummary(md_E1)\n# use linear \nmd_E2 = lm(E ~ relevel(condition, \"standard\"), data = rbind(data_exp2, data_exp3))\nsummary(md_E2)\n\n\n\n\n\n\n### Q ###\n\n# Q exp2\n# hierarchical & normal linear model for Q ~ alt\nmd_Q211 = lmer(Q ~ scale(text_alternations) + (1|id), data = data_exp2)\nsummary(md_Q211)\n# use linear regaression (by comparing BIC)\nmd_Q212 = lm(Q ~ scale(text_alternations), data = data_exp2)\nsummary(md_Q212)\n\n# hierarchical & normal linear model for alt ~ cond\nmd_Q221 = lmer(text_alternations ~ relevel(condition, \"standard\") + (1|id), data = data_exp2)\nsummary(md_Q221)\n# use hierarchical regaression (by comparing BIC)\nmd_Q222 = lm(text_alternations ~ relevel(condition, \"standard\"), data = data_exp2)\nsummary(md_Q222)\n\n# Q2 ~ cond\nmd_Q21 = lmer(Q ~ relevel(condition, \"standard\") + (1|id), data = data_exp2)\nsummary(md_Q21)\n# use linear model\nmd_Q22 = lm(Q ~ relevel(condition, \"standard\"), data = data_exp2)\nsummary(md_Q22)\n\n# check mediation\nmd_Q2 = lm(Q ~ relevel(condition, \"standard\") + scale(text_alternations), data = data_exp2)\nsummary(md_Q2)\n\n\n\n# Q exp3\n# hierarchical & normal linear model for Q ~ alt\nmd_Q311 = lmer(Q ~ scale(text_alternations) + scale(text_alternations)*relevel(condition, \"standard\") + (1|id), data = data_exp3)\nsummary(md_Q311)\n# use linear regaression (by comparing BIC)\nmd_Q312 = lm(Q ~scale(text_alternations), data = data_exp3)\nsummary(md_Q312)\n\n#######\n####************************#########\n# hierarchical & normal linear model for alt ~ cond\nmd_Q321 = lmer(text_alternations ~ quarter + relevel(condition, \"standard\") + (1|id), data = data_exp3)\nsummary(md_Q321)\n# use hierarchical regaression (by comparing BIC)\nmd_Q322 = lm(text_alternations ~ quarter + relevel(condition, \"standard\"), data = data_exp3)\nsummary(md_Q322)\n\n\n# Q3 ~ cond\nmd_Q31 = lmer(Q ~ relevel(condition, \"standard\") + (1|id), data = data_exp3)\nsummary(md_Q31)\n# use linear model\nmd_Q32 = lm(Q ~ relevel(condition, \"standard\"), data = data_exp3)\nsummary(md_Q32)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# full model of Q w/ text_alternations = text->image\n# variance = 0\nmd_Q1 = lmer(Q ~ relevel(condition, \"standard\") + as.factor(version) + scale(fix_text_pct) + scale(fix_image_pct) + scale(text_alternations) + (1|id), data = data_new)\nsummary(md_Q1)\n\n# reduced model of Q\n# variance = 0\nmd_Q2 = lmer(Q ~ relevel(condition, \"standard\") + scale(fix_image_pct) + (1|id), data = data_new)\nsummary(md_Q2)\n\n# full model of E w/ text_alternations = text->image\n# variance = 0.27 (compared to estimate 2.24)\n# only separated condition sig\nmd_E1 = lmer(E ~ relevel(condition, \"standard\") + as.factor(version) + scale(fix_text_pct) + scale(fix_image_pct) + scale(text_alternations) + (1|id), data = data_new)\nsummary(md_E1)\n\n# reduced model of E \n# variance 0.34 (compared to estimate 2.313)\n# only separated condition sig\nmd_E2 = lmer(E ~ relevel(condition, \"standard\") + (1|id), data = data_new)\nsummary(md_E2)\n\n\n# mediation # absolute image fix time\n# separated text alternation \n# interaction\n\n# Question control groups different, version different\n# Events same version similar\n\nmd_E2 = lmer(fix_image_pct ~ relevel(condition, \"standard\") + (1|id), data = data_new)\nsummary(md_E2)\n\n\nmd_E3 = lmer(E ~scale(text_alternations) + (1|id), data = data_new)\nsummary(md_E3)\n\nmd_Q3 = lmer(Q ~scale(text_alternations) + (1|id), data = data_new)\nsummary(md_Q3)\n\n# md_Q3 = lmer(Q ~scale(text_alternations) + (1|id), data = data_new) is sig\n# when alternation = text-image\n\nmd_Q_exp1 = lmer(Q ~ relevel(condition, \"standard\") + as.factor(version) + scale(fix_text_pct) + scale(fix_image_pct) + scale(text_alternations) + (1|id), data = data_exp1)\nsummary(md_Q_exp1)\n\nmd_Q_exp2 = lmer(Q ~ relevel(condition, \"standard\") + as.factor(version) + scale(fix_text_pct) + scale(fix_image_pct) + scale(text_alternations) + (1|id), data = data_exp2)\nsummary(md_Q_exp2)\n\nmd_Q_exp3 = lmer(Q ~ relevel(condition, \"standard\") + scale(fix_text_pct) + scale(fix_image_pct) + scale(text_alternations) + (1|id), data = data_exp3)\nsummary(md_Q_exp3)\n\n\n\n\n\n\nmd_E_exp1 = lmer(E ~ relevel(condition, \"standard\") + as.factor(version) + scale(fix_text_pct) + scale(fix_image_pct) + scale(text_alternations) + (1|id), data = data_exp1)\nsummary(md_E_exp1)\n\nmd_E_exp2 = lmer(E ~ relevel(condition, \"standard\") + as.factor(version) + scale(fix_text_pct) + scale(fix_image_pct) + scale(text_alternations) + (1|id), data = data_exp2)\nsummary(md_E_exp2)\n\nmd_E_exp3 = lmer(E ~ relevel(condition, \"standard\") + scale(fix_text_pct) + scale(fix_image_pct) + scale(text_alternations) + (1|id), data = data_exp3)\nsummary(md_E_exp3)\n\n\n# mediation model using text_alternation with text_alternation = text -> image\n# sig\nmd_E_med_1 = lmer(E ~ scale(text_alternations) + (1|id), data = data_new)\nsummary(md_E_med_1)\n\n# sig\nmd_med_E1 = lmer(text_alternations ~ relevel(condition, \"standard\") + (1|id), data = data_new)\nsummary(md_med_E1)\n\n# not sig\nmd_med_E = lmer(E ~ scale(text_alternations) + relevel(condition, \"standard\") + (1|id), data = data_new)\nsummary(md_med_E)\n\n\n\n# sig\nmd_Q_med_1 = lmer(Q ~ scale(text_alternations) + (1|id), data = data_exp1)\nsummary(md_Q_med_1)\n\n# not sig\nmd_Q_med_2 = lmer(Q ~ scale(text_alternations) + (1|id), data = data_exp2)\nsummary(md_Q_med_2)\n\n# not sig\nmd_Q_med_3 = lmer(Q ~ scale(text_alternations) + (1|id), data = data_exp3)\nsummary(md_Q_med_3)\n\n\n\n\n\nmd_E_med_1 = lmer(E ~ scale(text_alternations) + scale(text_alternations)*relevel(condition, \"standard\") + (1|id), data = rbind(data_exp3, data_exp2))\nsummary(md_E_med_1)\n\nmd_E_med_2 = lm(E ~ scale(text_alternations) + scale(text_alternations)*relevel(condition, \"standard\"), data = rbind(data_exp3))\nsummary(md_E_med_2)\n\n\n\nmd_E_med_3 = lm(text_alternations ~ relevel(condition, \"standard\"), data = rbind(data_exp3))\nsummary(md_E_med_3)\n\nmd_E_med_4 = lm(E ~ scale(text_alternations), data = rbind(data_exp3))\nsummary(md_E_med_4)\n\n\nmd_E_med_5 = lm(Q ~ relevel(condition, \"standard\"), data = rbind(data_exp3))\nsummary(md_E_med_5)\n\n\n\n\n\n\n\n",
    "created" : 1523546381529.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "632008867",
    "id" : "1E0A9FD8",
    "lastKnownWriteTime" : 1523550439,
    "last_content_update" : 1523550439431,
    "path" : "~/Documents/Courses 2017S/Statistical Practice/Reading & Attention/Hierarchical Model/try_model.R",
    "project_path" : "try_model.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}